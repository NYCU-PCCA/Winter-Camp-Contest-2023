diff --git a/p2d/main.py b/p2d/main.py
index ad8cc5d..a1e2039 100644
--- a/p2d/main.py
+++ b/p2d/main.py
@@ -70,7 +70,7 @@ class ProblemConfig(ProblemAspect):
                 self.warning('Can not find config of %s, use default.' % problem.shortname)
                 config = ProblemConfig.__DEFAULT_CONFIG
             self._data = xml.etree.ElementTree.parse(self.configfile)
-            self.name = self._data.find('names').find('name').attrib['value']
+            self.name = config.name or self._data.find('names').find('name').attrib['value']
             self.timelimit = str(float(self._data.find('judging').find('testset').find('time-limit').text) / 1000.0)
             self.checker = self._data.find('assets').find('checker')
             self.interactor = self._data.find('assets').find('interactor')
@@ -92,8 +92,9 @@ class ProblemConfig(ProblemAspect):
             '  probid = %s' % self.probid,
             '  name = %s' % self.name.replace("'", "`"),
             '  timelimit = %s' % self.timelimit,
-            '  color = %s' % self.color
         ]
+        if self.color:
+            ini_content.append('  color = %s' % self.color)
         [*map(self.info, ini_content)]
         with open(ini_file, 'w', encoding='utf-8') as f:
             f.writelines(map(lambda s: s.strip() + '\n', ini_content))
@@ -143,9 +144,9 @@ class OutputValidator(ProblemAspect):
                 yaml.safe_dump(data, yaml_file)
                 self._problem.ensure_dir('output_validators', 'interactor')
                 shutil.copyfile(testlib, os.path.join(self._problem.tmpdir,
-                                                      'output_validator', 'interactor', 'testlib.h'))
+                                                      'output_validators', 'interactor', 'testlib.h'))
                 shutil.copyfile(self._source, os.path.join(self._problem.tmpdir,
-                                                           'output_validator', 'interactor', 'interactor.cpp'))
+                                                           'output_validators', 'interactor', 'interactor.cpp'))
             else:
                 checker_name = Problem.checker_config.detect_checker(self._source)
                 if self._source is None:
@@ -167,9 +168,9 @@ class OutputValidator(ProblemAspect):
                     yaml.safe_dump(data, yaml_file, default_flow_style=False)
                     self._problem.ensure_dir('output_validators', 'checker')
                     shutil.copyfile(testlib, os.path.join(self._problem.tmpdir,
-                                                          'output_validator', 'checker', 'testlib.h'))
+                                                          'output_validators', 'checker', 'testlib.h'))
                     shutil.copyfile(self._source, os.path.join(self._problem.tmpdir,
-                                                               'output_validator', 'checker', 'interactor.cpp'))
+                                                               'output_validators', 'checker', 'interactor.cpp'))
 
 
 class TestCases(ProblemAspect):
diff --git a/p2d/problems.py b/p2d/problems.py
index a215ffc..262822b 100644
--- a/p2d/problems.py
+++ b/p2d/problems.py
@@ -13,7 +13,7 @@ class Problem(object):
     Class representing a single problem.
     """
 
-    __KEYS = ['problem_name', 'probid', 'color', 'samples', 'validation', 'validator_flags']
+    __KEYS = ['problem_name', 'probid', 'color', 'samples', 'validation', 'validator_flags', 'name']
     __VALIDATION = ['default', 'custom', 'custom interactive']
 
     def __init__(self, problem_name, problem_spec):
@@ -24,7 +24,7 @@ class Problem(object):
             problem_spec (dict): dictionary containing the specification
                 of the problem.
         """
-        if not re.match('^[a-zA-Z0-9][a-zA-Z0-9_.-]*[a-zA-Z0-9]$', problem_name):
+        if not re.match('^[a-zA-Z0-9]([a-zA-Z0-9_.-]*[a-zA-Z0-9])?$', problem_name):
             raise ProblemConfigError('Invalid Problem Name "%s"' % problem_name)
         self.problem_name = problem_name
         self.probid = None
@@ -32,6 +32,7 @@ class Problem(object):
         self.samples = None
         self.validation = None
         self.validator_flags = None
+        self.name = None
         self.update(problem_spec)
 
     def update(self, values):
@@ -80,8 +81,8 @@ class Problem(object):
         """
         if self.probid is None:
             raise ProblemConfigError('problem %s has no probid' % self.problem_name)
-        if self.color is None:
-            raise ProblemConfigError('problem %s has no color' % self.problem_name)
+        #  if self.color is None:
+        #      raise ProblemConfigError('problem %s has no color' % self.problem_name)
         if self.samples is None:
             raise ProblemConfigError('problem %s has no sample' % self.problem_name)
 
